// 8b 

#include <iostream>
//#include <string>
//#include <iomanip>
#include <fstream>
#include <vector>
using namespace std;

void linearSearch(vector<int>);
void binarySearch(vector<int>);

int main()
{
	ifstream sortedNumbersFile;
	sortedNumbersFile.open("sortedBubbleData.txt");
	vector<int> searchArray;
	int temp;  // variable for push_back

	if (!sortedNumbersFile)  // is the file open?
		cout << "error file not open \n";
	else  // if the file is open run the program 
	{
		cout << "creating array...\n";
		while (!sortedNumbersFile.eof())
		{
			sortedNumbersFile >> temp;
			searchArray.push_back(temp);
		}
		sortedNumbersFile.close();
		cout << "done\n";
		linearSearch(searchArray);
		binarySearch(searchArray);
	}

	cout << endl << "press enter to close the program";
	cin.get();
	return 0;
}

void linearSearch(vector<int> sortedArray)
{
	int searchNumbers[3] = { 26, 50, 92 };  // numbers to search for
	int value = 0;  // the number to search for
	int total = 0;  // number of steps taken
	//int index = 0;  // Used as a subscript to search array
	bool found = false; // Flag to indicate if the value was found

	cout << "searching for 26, 50, and 92 using linear search...\n";
	for (int count = 0; count < 3; count++)
	{
		found = false;
		value = searchNumbers[count];
		total = 0;
		for (int index = 0; (index < sortedArray.size() && !found); index++)
		{
			if (sortedArray[index] == value) // If the value is found
			{
				found = true; // Set the flag
			}
			total++;
		}
		if (found)
			cout << "linear search found " << value << " in " << total << " steps\n";
		else
			cout << "linear search did not find " << value << " in " << total << " steps\n";
	}
}

void binarySearch(vector<int> sortedArray)
{
	int searchNumbers[3] = { 26, 50, 92 };  // numbers to search for
	int value = 0;
	int total = 0;
	bool found = false; // Flag to indicate if the value was found

	cout << endl << "searching for 26, 50, and 92 using binary search...\n";
	for (int count = 0; count < 3; count++)
	{
		int first = 0; // First array element
		int	last = sortedArray.size() - 1; // Last array element
		int	middle; // Midpoint of search
		int	position = -1; // Position of search value
		total = 0;
		found = false;
		value = searchNumbers[count];  // the number to search for
		while (!found && first <= last)
		{
			middle = (first + last) / 2; // Calculate midpoint
			if (sortedArray[middle] == value) // If value is found at mid
			{
				found = true;
				position = middle;
			}
			else if (sortedArray[middle] > value) // If value is in lower half
				last = middle - 1;
			else
				first = middle + 1; // If value is in upper half
			total++;
		}
		if (found)
			cout << "binary search found " << value << " in " << total << " steps\n";
		else
			cout << "binary search did not find " << value << " in " << total << " steps\n";
	}
}
