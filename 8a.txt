// 8a

#include <iostream>
//#include <string>
//#include <iomanip>
#include <fstream>
#include <vector>
using namespace std;

void selectionSort(vector<int>);
void bubbleSort(vector<int>);

int main()
{
	ifstream unsortedNumbersFile;
	unsortedNumbersFile.open("unsortedData.txt");
	vector<int> bubbleArray;
	vector<int> selectionArray;
	int temp;  // variable for push_back

	if (!unsortedNumbersFile)  // is the file open?
		cout << "error file not open";
	else  // if the file is open, run the program
	{
		cout << "creating arrays...\n";
		while (!unsortedNumbersFile.eof())  // create the two arrays
		{
			unsortedNumbersFile >> temp;
			bubbleArray.push_back(temp);  // the bubbleArray
			selectionArray.push_back(temp);  // the selectionArray
		}
		unsortedNumbersFile.close();
		cout << "done\n";

		selectionSort(selectionArray);  // sort the selectionArray with selectionSort function
		bubbleSort(bubbleArray);  // sort the bubbleArray with bubbleSort function
	}

	cout << endl << "press enter to close program";
	cin.get();
	return 0;
}

void selectionSort(vector<int> unsortedArray)  // this function sorts using the selection sort method
{
	ofstream sortedNumbersFile;
	sortedNumbersFile.open("sortedSelectionData.txt");
	bool swap = true;
	int temp;  // used to swap values
	int total = 0;  // exchange tracker

	cout << endl << "sorting array using selection sort method...\n";
	while (swap == true)  // sort and track the number of exchanges made
	{
		swap = false;
		for (int count = 0; count < (unsortedArray.size() - 1); count++)
		{
			if (unsortedArray[count] > unsortedArray[count + 1])  // if an element is smaller than the preceding element, swap the two elements
			{
				temp = unsortedArray[count];
				unsortedArray[count] = unsortedArray[count + 1];
				unsortedArray[count + 1] = temp;
				total++;  // exchange tracker
				swap = true;  // set swap to true so the loop will run again
			}
		}
	}
	cout << "selection sort had " << total << " exchanges" << endl;  // print out the number of exchanges made

	cout << "creating sortedSelectionData.txt...\n";
	for (int val : unsortedArray)  // create the text file
	{
		sortedNumbersFile << val << endl;
	}
	sortedNumbersFile.close();
	cout << "done\n";
}

void bubbleSort(vector<int> unsortedArray)  // this function sorts using the bubble sort method
{
	ofstream sortedNumbersFile;
	sortedNumbersFile.open("sortedBubbleData.txt");
	int minElement;
	int minValue;
	int total = 0;  // exchange tracker

	cout << endl << "sorting array using bubble sort method...\n";
	for (int count = 0; count < (unsortedArray.size() - 1); count++)  // sort and track the number of exchanges made
	{
		minElement = count;
		minValue = unsortedArray[count];
		for (int index = count + 1; index < unsortedArray.size(); index++)  //  set the next element in the array for the smallest value
		{
			if (unsortedArray[index] < minValue)  // update index element as needed
			{
				minValue = unsortedArray[index];
				minElement = index;
				total++;  // exchange tracker
			}
		}
		unsortedArray[minElement] = unsortedArray[count];
		unsortedArray[count] = minValue;
	}
	cout << "bubble sort had " << total << " exchanges" << endl;  // print out the number of exchanges made

	cout << "creating sortedBubbleData.txt...\n";
	for (int val : unsortedArray)  // create the text file
	{
		sortedNumbersFile << val << endl;
	}
	sortedNumbersFile.close();
	cout << "done\n";
}
